seed: 74443
__set_seed: !apply:torch.manual_seed [!ref <seed>]

trainshards: ./train-shards/shard-000{000..210}.tar
validshards: ./dev-shards/shard-000000.tar
test_seen_shards: ./test-seen-shards/shard-000000.tar
test_unseen_shards: ./test-unseen-shards/shard-000000.tar
test_2021_shards: ./test2021-shards/shard-000000.tar
test_speecon_shards: ./test-speecon-shards/shard-000000.tar
test_yle_shards: ./test-yle-shards/shard-000000.tar
test_lp_shards: /scratch/elec/puhe/p/lahjoita-puhetta_speechbrain/shards/lp-test/shard-00000{0..1}.tar
validsamples: 1797
# data_folder_rirs: ./augmentation_data # noise/ris dataset will automatically be downloaded here
num_units: 1750
output_folder: !ref exp/Trafo-C/<seed>-<num_units>units
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
tokenizer_path: !ref exp/spm-train20-boseos/spm.<num_units>.model

tokenizer: !new:sentencepiece.SentencePieceProcessor
    model_file: !ref <tokenizer_path>


ckpt_interval_minutes: 30 # save checkpoint every N min
ckpts_to_keep: 1
avg_ckpts: 1

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 6
number_of_ctc_epochs: 6
#batch_size: 32 # This works for 1x GPU with 40G
ctc_weight: 0.3

# Used to be batch size 32 and grad accum 2
# If approx training utt length is around 12s, 
# then that would require around 384s data per batch
# But we can't fit that, let's use around 180 and double
# Grad accumulation to 4
gradient_accumulation: 1
max_grad_norm: 5.0
loss_reduction: 'batchmean'

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Dynbatch:
dynamic_batch_kwargs:
    max_sample_len: !ref <sample_rate> * 30
    sampler_kwargs:
        target_batch_numel: !ref <sample_rate> * 200 # 16000*120=2minutes
        max_batch_numel: !ref <sample_rate> * 220
    len_key: 'wav'
valid_dynamic_batch_kwargs:
    len_key: 'wav'
    sampler_kwargs:
        target_batch_numel: !ref <sample_rate> * 40
        max_batch_numel: !ref <sample_rate> * 60
train_loader_kwargs:
    num_workers: 4
    looped_nominal_epoch: 20000
valid_loader_kwargs:
    num_workers: 0
validbatchsize: 4
validbatches: !apply:math.ceil 
    - !ref <validsamples> / <validbatchsize>

# stages related parameters
lr_adam: 0.001

####################### Model parameters ###########################
# Transformer
d_model: 512
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: !ref <num_units>+1

# Outputs
blank_index: 1 
label_smoothing: 0.0
pad_index: 0 
unk_index: 1
bos_index: 2
eos_index: 3

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_beam_size: 10
test_beam_size: 10
#lm_weight: 0.60
ctc_weight_decode: 0.40
eos_threshold: 1.3
coverage_penalty: 3.0 
temperature: 1.5

test_data_id: validall
test_max_key: ACC

wer_file: !ref <output_folder>/wer_<test_data_id>_beam<test_beam_size>_ctc<ctc_weight_decode>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>.txt
decode_text_file: !ref <output_folder>/text_<test_data_id>_beam<test_beam_size>_ctc<ctc_weight_decode>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>.txt

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 3
    num_layers_per_block: 1
    out_channels: (64, 64, 64)
    kernel_sizes: (5, 5, 1)
    strides: (2, 2, 1)
    residuals: (False, False, True)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 1280
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: transformer
    attention_type: regularMHA
    normalize_before: True
    causal: False

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

opt_class: !name:torch.optim.Adam
    lr: !ref <lr_adam>
    betas: (0.9, 0.98)
    eps: 0.000000001


valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    using_eos_threshold: False
    length_normalization: False


test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
    modules: [!ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    ctc_weight: !ref <ctc_weight_decode>
    temperature: 1.15
    using_eos_threshold: False
    length_normalization: True

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 25000
    #model_size: !ref <d_model>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

augmentation: !new:speechbrain.lobes.augment.SpecAugment
    time_warp: False
    time_warp_window: 5
    time_warp_mode: bicubic
    freq_mask: True
    n_freq_mask: 4
    time_mask: True
    n_time_mask: 4
    replace_with_zero: False
    freq_mask_width: 15
    time_mask_width: 20

speed_perturb: True

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

