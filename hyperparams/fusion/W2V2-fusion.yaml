asr_seed: 2602
lm_seed: 2224
num_units: 1750

output_folder: !ref exp/CRDNN-A_trafo-D/<asr_seed>_<lm_seed>_<num_units>
save_folder: !ref <output_folder>/save

asr_folder: !ref exp/W2V2-F-Contd2/<asr_seed>-<num_units>units
lm_folder: !ref exp/LM/parl_30M_Trafo-D/<lm_seed>

validshards: ./dev-shards/shard-000000.tar
test_seen_shards: ./test-seen-shards/shard-000000.tar
test_unseen_shards: ./test-unseen-shards/shard-000000.tar
test_2021_shards: ./test2021-shards/shard-000000.tar
test_speecon_shards: ./test-speecon-shards/shard-000000.tar
test_yle_shards: ./test-yle-shards/shard-000000.tar
test_lp_shards: /scratch/elec/puhe/p/lahjoita-puhetta_speechbrain/shards/lp-test/shard-00000{0..1}.tar

validbatchsize: 4

tokenizer_path: !ref exp/spm-train20-boseos/spm.<num_units>.model
tokenizer: !new:sentencepiece.SentencePieceProcessor
    model_file: !ref <tokenizer_path>

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 40

# Model parameters
activation: !name:torch.nn.LeakyReLU
wav2vec_output_dim: 1024
dnn_neurons: 1024
freeze_wav2vec: True
dropout: 0.15

emb_size: 128
dec_neurons: 512
dec_layers: 1
output_neurons: !ref <num_units>  #Number of tokens (same as LM)

unk_index: 0 
blank_index: 0
pad_index: 0
bos_index: 1
eos_index: 2

# Decoding parameters
test_data_id: "valid"
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_beam_size: 4
test_beam_size: 4
eos_threshold: 1.3
using_max_attn_shift: False
max_attn_shift: 240
ctc_weight_decode: 0.5
coverage_penalty: 3.0 
temperature: 2.0
wer_file: !ref <output_folder>/wer_<test_data_id>_beam<test_beam_size>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>_noattnshift.txt
decode_text_file: !ref <output_folder>/text_<test_data_id>_beam<test_beam_size>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>_noattnshift.txt

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: !ref <freeze_wav2vec>
    freeze_feature_extractor: True
    save_path: !ref <w2v2_savepath>

enc: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, !ref <wav2vec_output_dim>]
    linear1: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation: !new:torch.nn.LeakyReLU
    drop: !new:torch.nn.Dropout
        p: !ref <dropout>
    linear2: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation2: !new:torch.nn.LeakyReLU

# Embedding (from indexes to an embedding space of dimension emb_size).
embedding: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <output_neurons>
    embedding_dim: !ref <emb_size>

# Attention-based RNN decoder.
decoder: !new:local_RNN.AttentionalRNNDecoder
    enc_dim: !ref <dnn_neurons>
    input_size: !ref <emb_size>
    rnn_type: gru
    attn_type: location
    hidden_size: !ref <dec_neurons>
    attn_dim: 2048
    num_layers: !ref <dec_layers>
    scaling: 1.0
    channels: 10
    kernel_size: 100
    re_init: True
    dropout: !ref <dropout>

# Linear transformation on the top of the encoder.
ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <wav2vec_output_dim>
    n_neurons: !ref <output_neurons>

# Linear transformation on the top of the decoder.
seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dec_neurons>
    n_neurons: !ref <output_neurons>

# Final softmax (for log posteriors computation).
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Cost definition for the CTC part.
ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class
modules:
    wav2vec2: !ref <wav2vec2>
    encoder: !ref <enc>
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    ctc_lin: !ref <ctc_lin>
    seq_lin: !ref <seq_lin>

# Gathering all the submodels in a single model object.
asr_model: !new:torch.nn.ModuleList
    - [!ref <embedding>, !ref <ctc_lin>, !ref <seq_lin>, !ref <decoder>, !ref <enc>]

test_search: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    ctc_linear: !ref <ctc_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    ctc_weight: !ref <ctc_weight_decode>
    temperature: !ref <temperature>


# model params
d_model: 768

# Functions
lm: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM  # yamllint disable-line rule:line-length
    vocab: !ref <num_units>
    d_model: !ref <d_model>
    nhead: 12
    num_encoder_layers: 12
    num_decoder_layers: 0
    d_ffn: 3072
    dropout: 0.0
    activation: !name:torch.nn.GELU
    normalize_before: False

modules:
    lm: !ref <lm>
    encoder: !ref <encoder>
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    ctc_lin: !ref <ctc_lin>
    seq_lin: !ref <seq_lin>
    normalize: !ref <normalize>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

test_search: !new:speechbrain.decoders.seq2seq.S2SRNNBeamSearchTransformerLM
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    temperature: !ref <temperature>
    language_model: !ref <lm>
    lm_weight: !ref <lm_weight>
    temperature_lm: !ref <temperature_lm>

# Functions that compute the statistics to track during the validation step.
error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True


# Load the models:

asr_ckpt_finder: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <asr_folder>/save
asr_pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <output_folder>/asr_ckpt_files
    loadables:
        model: !ref <asr_model>
        normalizer: !ref <normalize>

lm_ckpt_finder: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <lm_folder>/save
lm_pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <output_folder>/lm_ckpt_files
    loadables:
        model: !ref <lm>


    



